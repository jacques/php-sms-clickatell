<?php
/* +----------------------------------------------------------------------+
 * | SMS_Clickatell                                                       |
 * +----------------------------------------------------------------------+
 * | Copyright (c) 2002-2014 Jacques Marneweck                            |
 * +----------------------------------------------------------------------+
 * | This source file is subject to version 3.0 of the PHP license,       |
 * | that is bundled with this package in the file LICENSE, and is        |
 * | available at through the world-wide-web at                           |
 * | http://www.php.net/license/3_01.txt.                                 |
 * | If you did not receive a copy of the PHP license and are unable to   |
 * | obtain it through the world-wide-web, please send a note to          |
 * | license@php.net so we can mail you a copy immediately.               |
 * +----------------------------------------------------------------------+
 * | Authors: Jacques Marneweck <jacques@php.net>                         |
 * +----------------------------------------------------------------------+
 */

/**
 * PHP Interface into the Clickatell API
 *
 * @author      Jacques Marneweck <jacques@php.net>
 * @copyright   2002-2014 Jacques Marneweck.  All rights reserved.
 * @license     http://www.php.net/license/3_01.txt  PHP License
 * @access      public
 * @package     SMS
 */
class SMS_Clickatell {
    /**
     * Clickatell API Server
     * @var string
     */
    private $_api_server = "https://api.clickatell.com";

    /**
     * Clickatell API Server Session ID
     * @var string
     */
    private $_session_id = null;

    /**
     * Username from Clickatell used for authentication purposes
     * @var string
     */
    private $_username = null;

    /**
     * Password for Clickatell Username
     * @var string
     */
    private $_password = null;

    /**
     * Clickatell API Server ID
     * @var string
     */
    private $_api_id = null;

    /**
     * Enable debugging
     * @var bool
     */
    private $debug = false;

    /**
     * Curl handle resource id
     */
    private $_ch;

    /**
     * Temporary file resource id
     * @var resource
     */
    private $_fp;

    /**
     * Error codes generated by Clickatell Gateway
     * @var array
     */
    protected $_errors = array (
        '001' => 'Authentication failed',
        '002' => 'Unknown username or password',
        '003' => 'Session ID expired',
        '004' => 'Account frozen',
        '005' => 'Missing session ID',
        '007' => 'IP lockdown violation',
        '101' => 'Invalid or missing parameters',
        '102' => 'Invalid UDH. (User Data Header)',
        '103' => 'Unknown apismgid (API Message ID)',
        '104' => 'Unknown climsgid (Client Message ID)',
        '105' => 'Invalid Destination Address',
        '106' => 'Invalid Source Address',
        '107' => 'Empty message',
        '108' => 'Invalid or missing api_id',
        '109' => 'Missing message ID',
        '110' => 'Error with email message',
        '111' => 'Invalid Protocol',
        '112' => 'Invalid msg_type',
        '113' => 'Max message parts exceeded',
        '114' => 'Cannot route message',
        '115' => 'Message Expired',
        '116' => 'Invalid Unicode Data',
        '120' => 'Invalid delivery date',
        '121' => 'Destination mobile number blocked',
        '122' => 'Destination mobile opted out',
        '123' => 'Invalid Sender ID',
        '128' => 'Number delisted',
        '130' => 'Maximum MT limitexceeded until <UNIXTIME STAMP>',
        '201' => 'Invalid batch ID',
        '202' => 'No batch template',
        '301' => 'No credit left',
        '302' => 'Max allowed credit'
    );

    /**
     * Message status
     *
     * @var array
     */
    protected $_message_status = array (
        '001' => 'Message unknown',
        '002' => 'Message queued',
        '003' => 'Delivered',
        '004' => 'Received by recipient',
        '005' => 'Error with message',
        '006' => 'User cancelled message delivery',
        '007' => 'Error delivering message',
        '008' => 'OK',
        '009' => 'Routing error',
        '010' => 'Message expired',
        '011' => 'Message queued for later delivery',
        '012' => 'Out of credit'
    );

    protected $_msg_types = array (
        'SMS_TEXT',
        'SMS_FLASH',
        'SMS_NOKIA_OLOGO',
        'SMS_NOKIA_GLOGO',
        'SMS_NOKIA_PICTURE',
        'SMS_NOKIA_RINGTONE',
        'SMS_NOKIA_RTTL',
        'SMS_NOKIA_CLEAN',
        'SMS_NOKIA_VCARD',
        'SMS_NOKIA_VCAL',
    );

    /**
     * Required features.  FEAT_8BIT, FEAT_UDH, FEAT_UCS2 and FEAT_CONCAT are
     * set by default by Clickatell.
     */
    const FEAT_TEXT     = 1;
    const FEAT_8BIT     = 2;
    const FEAT_UDH      = 4;
    const FEAT_UCS2     = 8;
    const FEAT_ALPHA    = 16;
    const FEAT_NUMBER   = 32;
    const FEAT_FLASH    = 512;
    const FEAT_DELIVACK = 8192;
    const FEAT_CONCAT   = 16384;

    /**
     * Authenticate to the Clickatell API Server.
     *
     * @return mixed true on sucess or PEAR_Error object
     * @access public
     * @since 1.1
     */
    public function auth () {
        $_url = $this->_api_server . "/http/auth";
        $_post_data = "user=" . $this->_username . "&password=" . $this->_password . "&api_id=" . $this->_api_id;

        $response = $this->_curl($_url, $_post_data);
        if ($response instanceof PEAR_Error) {
            return $response;
        }
        $sess = preg_split("/:/", $response['data']);

        $this->_session_id = trim($sess[1]);

        if ($sess[0] == "OK") {
            return (true);
        } else {
            throw new Exception($response['data']);
        }
    }

    /**
     * Delete message queued by Clickatell which has not been passed
     * onto the SMSC.
     *
     * @access  public
     * @since   1.14
     * @see     http://www.clickatell.com/downloads/http/Clickatell_HTTP.pdf
     */
    public function deletemsg ($apimsgid) {
        $_url = $this->_api_server . "/http/delmsg";
        $_post_data = "session_id=" . $this->_session_id . "&apimsgid=" . $apimsgid;

        $response = $this->_curl($_url, $_post_data);
        if ($response instanceof PEAR_Error) {
            return $response;
        }
        $sess = preg_split("/:/", $response['data']);

        $deleted = preg_split("/[\s:]+/", $response['data']);
        if ($deleted[0] == "ID") {
            return (array($deleted[1], $deleted[3]));
        } else {
            throw new Exception($response['data']);
        }
    }

    /**
     * Query balance of remaining SMS credits
     *
     * @access  public
     * @since   1.9
     */
    public function getbalance () {
        $_url = $this->_api_server . "/http/getbalance";
        $_post_data = "session_id=" . $this->_session_id;

        $response = $this->_curl($_url, $_post_data);
        if ($response instanceof PEAR_Error) {
            return $response;
        }
        $send = preg_split("/:/", $response['data']);

        if ($send[0] == "Credit") {
            return trim($send[1]);
        } else {
            throw new Exception($response['data']);
        }
    }

    /**
     * Determine the cost of the message which was sent
     *
     * @param   string  api_msg_id
     * @since   1.20
     * @access  public
     */
    public function getmsgcharge ($apimsgid) {
        $_url = $this->_api_server . "/http/getmsgcharge";
        $_post_data = "session_id=" . $this->_session_id . "&apimsgid=" . trim($apimsgid);

        if (32 != strlen($apimsgid)) {
            throw new Exception('Invalid API Message Id');
        }

        $response = $this->_curl($_url, $_post_data);
        if ($response instanceof PEAR_Error) {
            return $response;
        }
        $charge = preg_split("/[\s:]+/", $response['data']);

        if ($charge[2] == "charge") {
            return (array($charge[3], $charge[5]));
        }

        /**
         * Return charge and message status
         */
        return (array($charge[3], $charge[5]));
    }

    /**
     * Initilaise the Clicaktell SMS Class
     *
     * <code>
     * <?php
     * require_once 'SMS/Clickatell.php';
     *
     * try {
     *   $sms = new SMS_Clickatell;
     *   $res = $sms->init(
     *     array (
     *       'user' => 'username',
     *       'pass' => 'password',
     *       'api_id' => '12345'
     *     )
     *   );
     *   $res = $sms->auth();
     * } Catch (Exception $e) {
     *   die ($e->getMessage());
     * }
     * ?>
     * </code>
     *
     * @param   array   array of parameters
     * @return  mixed   void if valid else a PEAR Error
     * @access  public
     * @throws  Exception
     * @since   1.9
     */
    public function init ($_params = array()) {
        if (is_array($_params)) {
            if (!isset($_params['user'])) {
                throw new Exception('Missing parameter user.');
            }

            if (!isset($_params['pass'])) {
                throw new Exception('Missing parameter pass.');
            }

            if (!isset($_params['api_id'])) {
                throw new Exception('Missing parameter api_id.');
            }

            if (!is_numeric($_params['api_id'])) {
                throw new Exception('Invalid api_id.');
            }

            if (isset($_params['debug'])) {
                $this->debug = (bool)$_params['debug'];
            }

            $this->_username = $_params['user'];
            $this->_password = $_params['pass'];
            $this->_api_id = $_params['api_id'];
        } else {
            throw new Exception('You need to specify paramaters for authenticating to Clickatell.');
        }
    }

    /**
     * Keep our session to the Clickatell API Server valid.
     *
     * @return mixed true on sucess or PEAR_Error object
     * @access public
     * @since 1.1
     */
    public function ping () {
        $_url = $this->_api_server . "/http/ping";
        $_post_data = "session_id=" . $this->_session_id;

        $response = $this->_curl($_url, $_post_data);
        if ($response instanceof PEAR_Error) {
            return $response;
        }
        $sess = preg_split("/:/", $response['data']);

        if ($sess[0] == "OK") {
            return (true);
        } else {
            throw new Exception($response['data']);
        }
    }

    /**
     * Query message status
     *
     * @param string spimsgid generated by Clickatell API
     * @return string message status or PEAR_Error object 
     * @access public
     * @since 1.5
     */
    public function querymsg ($apimsgid) {
        $_url = $this->_api_server . "/http/querymsg";
        $_post_data = "session_id=" . $this->_session_id . "&apimsgid=" . $apimsgid;

        $response = $this->_curl($_url, $_post_data);
        if ($response instanceof PEAR_Error) {
            return $response;
        }
        $status = preg_split("/ /", $response['data']);

        if ($status[0] == "ID:") {
            return (trim($status[3]));
        } else {
            throw new Exception($response['data']);
        }
    }

    /**
     * Query if Clickatell can deliver to a destination and what that minimum
     * price is
     *
     * @param   string  MSISDN to query
     * @return  mixed   array with first element being true if routeable else false and second element is the message cost
     */
    public function routecoverage($msisdn) {
        $_url = $this->_api_server . "/utils/routeCoverage.php";
        $_post_data = "session_id=" . $this->_session_id . "&msisdn=" . $msisdn;

        $response = $this->_curl($_url, $_post_data);
        if ($response instanceof PEAR_Error) {
            return $response;
        }
        $status = preg_split("/ /", $response['data']);

        if ($status[0] == "OK:") {
            return (array(true, trim($status[count($status)-1])));
        } else {
            return (array(false, 0));
        }
    }

    /**
     * Send an SMS Message via the Clickatell API Server
     *
     * @param array database result set
     * @return mixed true on sucess or PEAR_Error object
     * @access public
     * @since 1.2
     */
    public function sendmsg ($_msg) {
        $_url = $this->_api_server . "/http/sendmsg";
        $_post_data = "session_id=" . $this->_session_id . "&to=" . $_msg['to'] . "&text=" . urlencode ($_msg['text']) . "&callback=3&deliv_ack=1";
        $extras = array ();
        $optional = array (
            'from',
            'climsgid',
            'mo',
        );

        foreach ($optional as $field) {
            if (isset($_msg[$field]) && !empty($_msg[$field])) {
                $extras[] = "{$field}=" . $_msg[$field];
            }
        }
        if (count($extras) > 0) {
            $_post_data .= "&" . implode("&", $extras);
        }

        if (!in_array($_msg['msg_type'], $this->_msg_types)) {
            throw new Exception("Invalid message type. Message ID is " . $_msg['id']);
        }

        if ($_msg['msg_type'] != "SMS_TEXT") {
            $_post_data .= "&msg_type=" . $_msg['msg_type'];
        }

        /**
         * Check if we are using a queue when sending as each account
         * with Clickatell is assigned three queues namely 1, 2 and 3.
         */
        if (isset($_msg['queue']) && is_numeric($_msg['queue'])) {
            if (in_array($_msg['queue'], range(1, 3))) {
                $_post_data .= "&queue=" . $_msg['queue'];
            }
        }

        $req_feat = 0;
        /**
         * Normal text message
         */
        if ($_msg['msg_type'] == 'SMS_TEXT') {
            $req_feat += self::FEAT_TEXT;
        }
        /**
         * We set the sender id is alpha numeric or numeric
         * then we change the sender from data.
         */
        if (isset($_msg['from']) && !empty($_msg['from'])) {
            if (is_numeric($_msg['from'])) {
                $req_feat += self::FEAT_NUMBER;
            } elseif (is_string($_msg['from'])) {
                $req_feat += self::FEAT_ALPHA;
            }
        }
        /**
         * Flash Messaging
         */
        if ($_msg['msg_type'] == 'SMS_FLASH') {
            $req_feat += self::FEAT_FLASH;
        }
        /**
         * Delivery Acknowledgments
         */
        $req_feat += self::FEAT_DELIVACK;

        if (!empty($req_feat)) {
            $_post_data .= "&req_feat=" . $req_feat;
        }

        if (strlen($_msg['text']) > 160) {
            $req_feat += self::FEAT_CONCAT;
        }

        /**
         * Must we escalate message delivery if message is stuck in
         * the queue at Clickatell?
         */
        if (isset($_msg['escalate']) && !empty($_msg['escalate'])) {
            if (is_numeric($_msg['escalate'])) {
                if (in_array($_msg['escalate'], range(1, 2))) {
                    $_post_data .= "&escalate=" . $_msg['escalate'];
                }
            }
        }

        $response = $this->_curl($_url, $_post_data);
        if ($response instanceof PEAR_Error) {
            return $response;
        }
        $send = preg_split("/:/", $response['data']);

        if ($send[0] == "ID") {
            return array ("1", trim($send[1]));
        } else {
            throw new Exception($response['data']);
        }
    }

    /**
     * Spend a clickatell voucher which can be used for topping up of
     * sub user accounts.
     *
     * @param   string  voucher number
     * @access  public
     * @since   1.22
     * @see     http://www.clickatell.com/downloads/http/Clickatell_HTTP.pdf
     */
    public function tokenpay ($voucher) {
        $_url = $this->_api_server . "/http/token_pay";
        $_post_data = "session_id=" . $this->_session_id . "&token=" . trim($voucher);

        if (!is_numeric($voucher) && 16 != strlen($voucher)) {
            return (PEAR::raiseError('Invalid voucher number'));
        }

        $response = $this->_curl($_url, $_post_data);
        if ($response instanceof PEAR_Error) {
            return $response;
        }
        $sess = preg_split("/:/", $response['data']);

        $paid = preg_split("/[\s:]+/", $response['data']);
        if ($paid[0] == "OK") {
            return true; 
        } else {
            throw new Exception($response['data']);
        }
    }

    /**
     * Perform curl stuff
     *
     * @param   string  URL to call
     * @param   string  HTTP Post Data
     * @return  mixed   HTTP response body or PEAR Error Object
     * @access  private
     */
    public function _curl ($url, $post_data) {
        /**
         * Reuse the curl handle
         */
        if (!is_resource($this->_ch)) {
            $this->_ch = curl_init();
            if (!$this->_ch || !is_resource($this->_ch)) {
                throw new Exception('Cannot initialise a new curl handle.');
            }
            curl_setopt($this->_ch, CURLOPT_TIMEOUT, 20);
            curl_setopt($this->_ch, CURLOPT_VERBOSE, $this->debug);
            curl_setopt($this->_ch, CURLOPT_FAILONERROR, 1);
            curl_setopt($this->_ch, CURLOPT_FOLLOWLOCATION, ini_get('safe_mode') ? false : true);
            curl_setopt($this->_ch, CURLOPT_COOKIEJAR, "/dev/null");
            curl_setopt($this->_ch, CURLOPT_SSL_VERIFYHOST, 2);
            curl_setopt($this->_ch, CURLOPT_USERAGENT, 'SMS_Clickatell 0.7.0-alpha - http://www.powertrip.co.za/PEAR/SMS_Clickatell/');
        }

        $this->_fp = tmpfile();

        curl_setopt($this->_ch, CURLOPT_URL, $url);
        curl_setopt($this->_ch, CURLOPT_POST, 1);
        curl_setopt($this->_ch, CURLOPT_POSTFIELDS, $post_data);
        curl_setopt($this->_ch, CURLOPT_FILE, $this->_fp);

        $status = curl_exec($this->_ch);
        $response['http_code'] = curl_getinfo($this->_ch, CURLINFO_HTTP_CODE);

        if (empty($response['http_code'])) {
            throw new Exception ('No HTTP Status Code was returned.');
        } elseif ($response['http_code'] === 0) {
            throw new Exception ('Cannot connect to the Clickatell API Server.');
        }

        if ($status) {
            $response['error'] = curl_error($this->_ch);
            $response['errno'] = curl_errno($this->_ch);
        }

        rewind($this->_fp);

        $pairs = "";
        while ($str = fgets($this->_fp, 4096)) {
            $pairs .= $str;
        }
        fclose($this->_fp);

        $response['data'] = $pairs;
        unset($pairs);
        asort($response);
        return ($response);
    }
}

/* vim: set noet ts=4 sw=4 ft=php: : */
